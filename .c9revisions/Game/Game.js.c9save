{"ts":1346355018313,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function() {\n    var brisco = {};\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = brisco;\n        }\n        exports.brisco = brisco;\n    }\n    else {\n        root['brisco'] = brisco;\n    }\n\n    brisco.Board = {\n        GetVulnerability: function(boardNumber) {\n            var vulnMod = boardNumber % 16;\n            switch (vulnMod) {\n            case 1:\n            case 8:\n            case 11:\n            case 14:\n                return brisco.Vulnerability.None;\n            case 4:\n            case 7:\n            case 10:\n            case 13:\n                return brisco.Vulnerability.Both;\n            case 3:\n            case 6:\n            case 9:\n            case 0:\n                return brisco.Vulnerability.EastWest;\n            default:\n                return brisco.Vulnerability.NorthSouth;\n            }\n        },\n\n        GetDealer: function(boardNumber) {\n            var dealerMod = boardNumber % 4;\n            switch (dealerMod) {\n            case 1:\n                return brisco.Direction.North;\n            case 2:\n                return brisco.Direction.East;\n            case 3:\n                return brisco.Direction.South;\n            default:\n                return brisco.Direction.West;\n            }\n        }\n    };\n\n    brisco.Direction = {\n        North: 1,\n        South: 2,\n        East: 3,\n        West: 4,\n        IsNorthSouth: function(direction) {\n            return direction === this.North || direction === this.South;\n        }\n    };\n\n    brisco.Vulnerability = {\n        None: 1,\n        Both: 2,\n        NorthSouth: 3,\n        EastWest: 4,\n        IsVulnerable: function(vulnerability, direction) {\n            if (vulnerability === this.None) return false;\n            if (vulnerability === this.Both) return true;\n            if (vulnerability === this.NorthSouth) return brisco.Direction.IsNorthSouth(direction);\n            return !brisco.Direction.IsNorthSouth(direction);\n        }\n    };\n\n    brisco.Suit = {\n        Clubs: 1,\n        Diamonds: 2,\n        Hearts: 3,\n        Spades: 4,\n        Notrump: 5,\n\n        IsMajor: function(suit) {\n            return (suit === this.Spades || suit === this.Hearts);\n        },\n\n        IsMinor: function(suit) {\n            return (suit === this.Clubs || suit == this.Diamonds);\n        },\n\n        PointsPerTrick: function(suit) {\n            return this.IsMinor(suit) ? 20 : 30;\n        },\n\n        ExtraPointsForFirstTrick: function(suit) {\n            return suit == this.Notrump ? 10 : 0;\n        }\n\n    };\n\n    // Current version.\n    brisco.VERSION = '0.0.1';\n}).call(this);\n"]],"start1":0,"start2":0,"length1":0,"length2":2682}]],"length":2682}
{"contributors":[],"silentsave":false,"ts":1346355066408,"patch":[[{"diffs":[[0,"s || suit =="],[1,"="],[0," this.Diamon"]],"start1":2350,"start2":2350,"length1":24,"length2":25},{"diffs":[[0," suit =="],[1,"="],[0," this.No"]],"start1":2563,"start2":2563,"length1":16,"length2":17}]],"length":2684,"saved":false}
{"contributors":[],"silentsave":false,"ts":1346432071511,"patch":[[{"diffs":[[1,"var _ = require(\"underscore\");\n"],[0,"(functio"]],"start1":0,"start2":0,"length1":8,"length2":39},{"diffs":[[0,"        "],[-1,"G"],[1,"g"],[0,"etVulner"]],"start1":339,"start2":339,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"G"],[1,"g"],[0,"etDe"]],"start1":969,"start2":969,"length1":9,"length2":9},{"diffs":[[0,"        "],[-1,"I"],[1,"i"],[0,"sNorthSo"]],"start1":1480,"start2":1480,"length1":17,"length2":17},{"diffs":[[0,"        "],[-1,"I"],[1,"i"],[0,"sVulnera"]],"start1":1722,"start2":1722,"length1":17,"length2":17},{"diffs":[[0,"risco.Direction."],[-1,"I"],[1,"i"],[0,"sNorthSouth(dire"]],"start1":1957,"start2":1957,"length1":33,"length2":33},{"diffs":[[0,"rection."],[-1,"I"],[1,"i"],[0,"sNorthSo"]],"start1":2027,"start2":2027,"length1":17,"length2":17},{"diffs":[[0,"        "],[-1,"I"],[1,"i"],[0,"sMajor: "]],"start1":2196,"start2":2196,"length1":17,"length2":17},{"diffs":[[0,"        "],[-1,"I"],[1,"i"],[0,"sMinor: "]],"start1":2309,"start2":2309,"length1":17,"length2":17},{"diffs":[[0,"        "],[-1,"P"],[1,"p"],[0,"ointsPer"]],"start1":2423,"start2":2423,"length1":17,"length2":17},{"diffs":[[0,"rn this."],[-1,"I"],[1,"i"],[0,"sMinor(s"]],"start1":2480,"start2":2480,"length1":17,"length2":17},{"diffs":[[0,"        "],[-1,"E"],[1,"e"],[0,"xtraPoin"]],"start1":2525,"start2":2525,"length1":17,"length2":17},{"diffs":[[0,"      }\n"],[-1,"\n"],[0,"    };"],[1,"\n\n    brisco.Denomination = {\n        Ace: 14,\n        King: 13,\n        Queen: 12,\n        Jack: 11,\n        Ten: 10,\n        Nine: 9,\n        Eight: 8,\n        Seven: 7,\n        Six: 6,\n        Five: 5,\n        Four: 4,\n        Three: 3,\n        Two: 2,\n        Small: -1,\n        Unknown: -2\n    };\n\n    brisco.Card = {\n        Denomination: null,\n        Suit: null,\n        equals: function(other) {\n            if (other && other.Suit === this.Suit && other.Denomination === this.Denomination) return true;\n            return false;\n        }\n    };\n\n    brisco.Bid = {\n        pass: false,\n        level: -1,\n        suit: null,\n        double: false,\n        reDouble: false,\n        explanation: null,\n        conventional: false,\n        bidQuality: null,\n        yourTurn: false\n    };\n\n    brisco.Auction = {\n        bids: [],\n        explanations: [],\n        dealer: null\n    };\n\n    brisco.Hand = {\n        Cards: [],\n\n        isComplete: function() {\n            if (this.Cards && this.Cards.length === 13) return true;\n            return false;\n        },\n\n        contains: function(card) {\n            if (card === null) {\n                return false;\n            }\n            return _.any(this.Cards, function(myCard) {\n                return card.equals(myCard);\n            });\n        },\n\n        add: function(card) {\n            this.Cards.push(card);\n        },\n\n        getCardsWithinSuit: function(suit) {\n            return _.find(this.Cards, function(card) {\n                return card.Suit === suit;\n            });\n        },\n        addCards: function(cards) {\n            this.Cards = this.Cards.concat(cards);\n        },\n\n        removeSuit: function(suit) {\n            var newCards = [];\n            for (var i = 0; i < this.Cards.length; i++) {\n                if (this.Cards[i] !== null && this.Cards[i].Suit !== suit) {\n                    newCards.push(this.Cards[i]);\n                }\n            }\n            this.Cards = newCards;\n        }\n    };\n    \n    brisco.Deal = {\n\tWest: null,\n\tNorth: null,\n\tEast: null,\n\tSouth: null,\n\n\tgetHand: function(direction) {\n\t\tswitch (direction) {\n\t\tcase brisco.Direction.West:\n\t\t\treturn this.West;\n\t\tcase brisco.Direction.North:\n\t\t\treturn this.North;\n\t\tcase brisco.Direction.East:\n\t\t\treturn this.East;\n\t\tcase brisco.Direction.South:\n\t\t\treturn this.South;\n\t\tdefault:\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic void setHand(Direction direction, Hand hand) {\n\t\tswitch (direction) {\n\t\tcase West:\n\t\t\tWest = hand;\n\t\t\tbreak;\n\t\tcase North:\n\t\t\tNorth = hand;\n\t\t\tbreak;\n\t\tcase East:\n\t\t\tEast = hand;\n\t\t\tbreak;\n\t\tcase South:\n\t\t\tSouth = hand;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn;\n\t\t}\n\t}\n\n\tpublic boolean contains(Card card) {\n\t\tif (West != null && West.contains(card))\n\t\t\treturn true;\n\t\tif (North != null && North.contains(card))\n\t\t\treturn true;\n\t\tif (East != null && East.contains(card))\n\t\t\treturn true;\n\t\tif (South != null && South.contains(card))\n\t\t\treturn true;\n\t\treturn false;\n\t}\n}\n*/\n        "],[0,"\n\n    //"]],"start1":2629,"start2":2629,"length1":23,"length2":2975},{"diffs":[[0," = '0.0."],[-1,"1"],[1,"2"],[0,"';\n}).ca"]],"start1":5640,"start2":5640,"length1":17,"length2":17}]],"length":5667,"saved":false}
{"contributors":[],"silentsave":false,"ts":1346444288744,"patch":[[{"diffs":[[0,"\n    };\n"],[-1,"    "],[0,""],[1,""],[0,"\n    bri"]],"start1":4632,"start2":4632,"length1":20,"length2":16},{"diffs":[[0,"eal = {\n"],[-1,"\t"],[1,"        "],[0,"West: nu"]],"start1":4653,"start2":4653,"length1":17,"length2":24},{"diffs":[[0,": null,\n"],[-1,"\t"],[1,"        "],[0,"North: n"]],"start1":4673,"start2":4673,"length1":17,"length2":24},{"diffs":[[0,": null,\n"],[-1,"\t"],[1,"        "],[0,"East: nu"]],"start1":4694,"start2":4694,"length1":17,"length2":24},{"diffs":[[0,": null,\n"],[-1,"\t"],[1,"        "],[0,"South: n"]],"start1":4714,"start2":4714,"length1":17,"length2":24},{"diffs":[[0," null,\n\n"],[-1,"\t"],[1,"        "],[0,"getHand:"]],"start1":4736,"start2":4736,"length1":17,"length2":24},{"diffs":[[0,"irection) {\n"],[-1,"\t\t"],[1,"            "],[0,"switch (dire"]],"start1":4771,"start2":4771,"length1":26,"length2":36},{"diffs":[[0,"irection) {\n"],[-1,"\t\t"],[1,"            "],[0,"case brisco."]],"start1":4804,"start2":4804,"length1":26,"length2":36},{"diffs":[[0,"ction.West:\n"],[-1,"\t\t\t"],[1,"                "],[0,"return this."]],"start1":4844,"start2":4844,"length1":27,"length2":40},{"diffs":[[0," this.West;\n"],[-1,"\t\t"],[1,"            "],[0,"case brisco."]],"start1":4878,"start2":4878,"length1":26,"length2":36},{"diffs":[[0,"tion.North:\n"],[-1,"\t\t\t"],[1,"                "],[0,"return this."]],"start1":4919,"start2":4919,"length1":27,"length2":40},{"diffs":[[0,".North;\n"],[-1,"\t\t"],[1,"            "],[0,"case bri"]],"start1":4958,"start2":4958,"length1":18,"length2":28},{"diffs":[[0,"n.East:\n"],[-1,"\t\t\t"],[1,"                "],[0,"return t"]],"start1":4998,"start2":4998,"length1":19,"length2":32},{"diffs":[[0,"s.East;\n"],[-1,"\t\t"],[1,"            "],[0,"case bri"]],"start1":5032,"start2":5032,"length1":18,"length2":28},{"diffs":[[0,".South:\n"],[-1,"\t\t\t"],[1,"                "],[0,"return t"]],"start1":5073,"start2":5073,"length1":19,"length2":32},{"diffs":[[0,"th;\n"],[-1,"\t\tdefault:\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic void"],[1,"            default:\n                return null;\n            }\n        },\n       "],[0," setHand"],[-1,"(Dire"],[1,": fun"],[0,"ction"],[-1," "],[1,"("],[0,"dire"]],"start1":5112,"start2":5112,"length1":74,"length2":109},{"diffs":[[0,"ion,"],[-1," Hand"],[0," han"]],"start1":5223,"start2":5223,"length1":13,"length2":8},{"diffs":[[0,"hand) {\n"],[-1,"\t\t"],[1,"            "],[0,"switch ("]],"start1":5228,"start2":5228,"length1":18,"length2":28},{"diffs":[[0,") {\n"],[-1,"\t\tcase West:\n\t\t\tWest = hand;\n\t\t\tbreak;\n\t\tcase North:\n\t\t\tNorth = hand;\n\t\t\tbreak;\n\t\tcase East:\n\t\t\tEast = hand;\n\t\t\tbreak;\n\t\tcase South:\n\t\t\tSouth = hand;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn;\n\t\t}\n\t}\n\n\tpublic boolean contains(Card card) {\n\t\tif ("],[1,"            case brisco.Direction.West:\n                this.West = hand;\n                break;\n            case brisco.Direction.North:\n                this.North = hand;\n                break;\n            case brisco.Direction.East:\n                this.East = hand;\n                break;\n            case brisco.Direction.South:\n                this.South = hand;\n                break;\n            default:\n                return;\n            }\n        },\n\n        contains: function(card) {\n            if (this."],[0,"West !="],[1,"="],[0," nul"]],"start1":5265,"start2":5265,"length1":249,"length2":535},{"diffs":[[0,"null && "],[1,"this."],[0,"West.con"]],"start1":5797,"start2":5797,"length1":16,"length2":21},{"diffs":[[0,".contains(card))"],[-1,"\n\t\t\t"],[1," "],[0,"return true;\n\t\ti"]],"start1":5814,"start2":5814,"length1":36,"length2":33},{"diffs":[[0,"ue;\n"],[-1,"\t\tif ("],[1,"            if (this."],[0,"North !="],[1,"="],[0," nul"]],"start1":5840,"start2":5840,"length1":22,"length2":38},{"diffs":[[0,"null && "],[1,"this."],[0,"North.co"]],"start1":5875,"start2":5875,"length1":16,"length2":21},{"diffs":[[0,".contains(card))"],[-1,"\n\t\t\t"],[1," "],[0,"return true;\n\t\ti"]],"start1":5893,"start2":5893,"length1":36,"length2":33},{"diffs":[[0,"ue;\n"],[-1,"\t\tif ("],[1,"            if (this."],[0,"East !="],[1,"="],[0," nul"]],"start1":5919,"start2":5919,"length1":21,"length2":37},{"diffs":[[0,"null && "],[1,"this."],[0,"East.con"]],"start1":5953,"start2":5953,"length1":16,"length2":21},{"diffs":[[0,".contains(card))"],[-1,"\n\t\t\t"],[1," "],[0,"return true;\n\t\ti"]],"start1":5970,"start2":5970,"length1":36,"length2":33},{"diffs":[[0,"ue;\n"],[-1,"\t\tif ("],[1,"            if (this."],[0,"South !="],[1,"="],[0," nul"]],"start1":5996,"start2":5996,"length1":22,"length2":38},{"diffs":[[0,"null && "],[1,"this."],[0,"South.co"]],"start1":6031,"start2":6031,"length1":16,"length2":21},{"diffs":[[0,"rd))"],[-1,"\n\t\t\t"],[1," "],[0,"retu"]],"start1":6061,"start2":6061,"length1":12,"length2":9},{"diffs":[[0,"ue;\n"],[-1,"\t\t"],[1,"            "],[0,"retu"]],"start1":6075,"start2":6075,"length1":10,"length2":20},{"diffs":[[0,"se;\n"],[-1,"\t}\n}\n*/\n"],[0,"        "],[1,"}\n    }"],[0,"\n\n  "]],"start1":6101,"start2":6101,"length1":24,"length2":23}]],"length":6191,"saved":false}
{"ts":1346444355496,"patch":[[{"diffs":[[0,"     }\n    }"],[1,";\n\n    brisco.BidQuality = {\n        VeryGood: 1,\n        Good: 2,\n        Poor: 3,\n        VeryPoor: 4,\n        Speculative: 5,\n        Questionable: 6\n    };\n"],[0,"\n\n    // Cur"]],"start1":6108,"start2":6108,"length1":24,"length2":184}]],"length":6351,"saved":false}
